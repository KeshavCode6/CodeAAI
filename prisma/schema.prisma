generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Challenge {
  id                  String              @id @default(uuid())
  challengeId         String              @unique
  name                String              @unique
  description         String
  difficulty          String
  arguments           String[]            // Prisma supports arrays directly
  testCases           TestCase[]
  points              Int                 @default(0)
  solves              Int?                @default(0)
  authorId            String
  creationTimestamp   DateTime


  @@map("challenges")
}

model TestCase {
  id         String              @id @default(uuid())
  args       Json
  output     String
  challenge  Challenge           @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId String

  @@map("test_cases")
}

model UserChallenges {
  id         String   @id @default(uuid())
  challengeId String
  userId      String
  solved      Boolean @default(false)
  @@map("UserChallenges")
}

model User {
  id                  String              @id @default(uuid())
  name                String
  email               String?             @unique
  image               String?             @default("")
  emailVerified       DateTime?           // Adding this field to track email verification
  points              Int                 @default(0)
  solves              Int                 @default(0)
  easyChallenges Int @default(0)
  hardChallenges Int @default(0)
  mediumChallenges Int @default(0)
  dailyChallenges Int @default(0)
  codeLeagueRank      Int                 @default(0)
  favoritedChallenges String[]            @default([])
  lastChallenge       String              @default("")
  pointsOverTime      Json                @default("{}")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  accounts            Account[]
  sessions            Session[]

  @@map("users")
}

model Stats {
  id                  Int            @id @default(1)
  totalChallenges      Int       @default(0)
  totalPoints      Int        @default(0)
  totalEasyChallenges Int @default(0)
  totalHardChallenges Int @default(0)
  totalMediumChallenges Int @default(0)
  totalDailyChallenges Int @default(0)
}

model Account {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  type               String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  scope              String?
  id_token           String?   @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique
  accessToken  String?  @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
